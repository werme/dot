#!/bin/bash

# git-auto-commit: Automatically commits changes with Claude-generated commit messages

# Function to show usage
show_usage() {
    echo "Git Auto Commit - Automatically commits changes with Claude-generated commit messages"
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --amend              Amend the last commit with a new, Claude-generated message"
    echo "  --context, -c TEXT   Provide additional context for Claude when generating the commit message"
    echo "  --help               Show this help message"
}

# Process command line arguments
amend_mode=false
user_note=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        --amend)
            amend_mode=true
            shift
            ;;
        --context|-c)
            if [[ -n "$2" && "$2" != --* ]]; then
                # If an argument is provided, use it
                user_note="$2"
                shift 2
            else
                # If no argument, prompt for input with gum
                echo "Enter additional context:"
                user_note=$(gum input --placeholder "Add some ASCII art at the end...")
                shift
            fi
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            show_usage
            exit 1
            ;;
    esac
done

if [ "$amend_mode" = true ]; then
    # Get the diff for the last commit
    diff_output=$(git show -p HEAD)

    # If there are staged changes, include them in the diff
    staged_diff=$(git diff --cached)
    if [ -n "$staged_diff" ]; then
        diff_output="$diff_output"$'\n'"$staged_diff"
    fi
else
    # Check for staged changes
    staged_changes=$(git diff --cached --name-only)

    if [ -z "$staged_changes" ]; then
        echo "No staged changes found. Adding all modified files..."
        git add -A

        # Check if there are any changes to commit after adding
        if [ -z "$(git diff --cached --name-only)" ]; then
            echo "No changes to commit."
            exit 0
        fi
    fi

    # Get the diff for the commit message generation
    diff_output=$(git diff --cached)
fi

# Get recent commit messages for style context
commit_history=$(git log -n 5 --pretty=format:"%h: %B")

# Prepare the prompt for Claude
claude_prompt="Generate a concise, descriptive git commit message for the following changes.

<changes>
$diff_output
</changes>

Here are the 5 most recent commits for style reference:

<commit-history>
$commit_history
</commit-history>

- Try to follow the commit style shown in the recent history below.
- When possible the message should focus on the why rather than the what or how
- Make sure the first line don't exceed 72 characters.

When using the \"conventional commits\" style:

- Stick to these prefixes: [feat:, fix:, docs:, style:, refactor:, perf:, test:, build:, ci:, chore:]
- Only use the scope (e.g. fix(scope): ...) format in monorepos when relevant. The scope should be the name of the package or app being modified.

Only output the commit message, nothing else."

# Add user note if provided
if [ -n "$user_note" ]; then
    claude_prompt="$claude_prompt

Additional user instructions for this specific commit (these take precedence over the above instructions):

<user-instructions>
$user_note
</user-instructions>"
fi

if [ "${DEBUG:-}" ]; then
    echo "[PROMPT]"
    echo ""
    echo "$claude_prompt"
fi

# Generate a commit message with Claude
commit_message=$(gum spin --show-output --spinner dot --title "Generating message..." -- claude -p "$claude_prompt")

if [ -z "$commit_message" ]; then
    echo "Failed to generate commit message."
    exit 1
fi

# Get the path to the Git directory
GIT_DIR=$(git rev-parse --git-dir)

# Write the Claude-generated message to the commit message file
COMMIT_MSG_FILE="$GIT_DIR/COMMIT_EDITMSG"
echo "$commit_message" > "$COMMIT_MSG_FILE"

# Add simple git status
echo "" >> "$COMMIT_MSG_FILE"
echo "# On branch $(git rev-parse --abbrev-ref HEAD)" >> "$COMMIT_MSG_FILE"
echo "# Changes to be committed:" >> "$COMMIT_MSG_FILE"
git diff --cached --name-status | sed 's/^M/#\tmodified:   /' | sed 's/^A/#\tnew file:   /' | sed 's/^D/#\tdeleted:    /' >> "$COMMIT_MSG_FILE"

# Get the modification time before opening the editor
MOD_TIME_BEFORE=$(stat -f %m "$COMMIT_MSG_FILE")

# Open the editor for user to review and edit the message
echo "Opening editor for message review..."
${GIT_EDITOR:-$EDITOR} "$COMMIT_MSG_FILE"

# Get the exit status of the editor
EDITOR_STATUS=$?

# Get the modification time after editing
MOD_TIME_AFTER=$(stat -f %m "$COMMIT_MSG_FILE")

# Check if the editor exited successfully and the file was modified
if [ $EDITOR_STATUS -ne 0 ] || [ "$MOD_TIME_BEFORE" = "$MOD_TIME_AFTER" ]; then
    echo "Commit aborted."
    # Clear the COMMIT_EDITMSG file
    > "$COMMIT_MSG_FILE"
    exit 1
fi

# Remove any lines starting with # (comments)
COMMIT_CONTENT=$(grep -v "^#" "$COMMIT_MSG_FILE")

# Perform the commit with the edited message (without comments)
if [ "$amend_mode" = true ]; then
    echo "Amending commit with edited message..."
    echo "$COMMIT_CONTENT" | git commit --amend -F -
else
    echo "Creating commit with edited message..."
    echo "$COMMIT_CONTENT" | git commit -F -
fi
