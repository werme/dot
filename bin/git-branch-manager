#!/bin/bash

# Git Branch Manager: Manage local Git branches with multiple actions

# Function to show usage
show_usage() {
    echo "Git Branch Manager"
    echo "Usage: $0 [action]"
    echo ""
    echo "Available actions:"
    echo "  delete    - Select and delete multiple branches"
    echo "  checkout  - Select and checkout a branch"
    echo "  merge     - Select a branch to merge into current branch"
    echo "  rename    - Select a branch to rename"
    echo "  info      - Show detailed information about branches"
    echo ""
    echo "If no action is specified, you will be prompted to choose one."
}

# Function to get sorted branches
get_branches() {
    local exclude_current=$1
    local exclude_filter=""
    
    if [ "$exclude_current" = true ]; then
        exclude_filter="grep -v \"$(git symbolic-ref --short HEAD)\""
    else
        exclude_filter="cat"
    fi
    
    git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short)' | grep -v "main\|master" | eval "$exclude_filter"
}

# Function to delete branches
delete_branches() {
    echo "Fetching local branches ordered by most recently used..."
    branches=$(get_branches true)
    
    if [ -z "$branches" ]; then
        echo "No branches to delete (excluding current branch, main and master)."
        return
    fi
    
    echo "Select branches to delete (use Tab to select multiple, press Enter when done):"
    selected=$(echo "$branches" | fzf --multi --height=30 --layout=reverse)
    
    if [ -z "$selected" ]; then
        echo "No branches selected for deletion."
        return
    fi
    
    echo -e "\nYou have selected the following branches for deletion:"
    echo "$selected"
    echo -e "\nAre you sure you want to delete these branches? (y/N)"
    read confirmation
    
    if [ "$confirmation" != "y" ] && [ "$confirmation" != "Y" ]; then
        echo "Operation cancelled."
        return
    fi
    
    echo -e "\nDeleting branches..."
    for branch in $selected; do
        echo "Deleting branch: $branch"
        git branch -D "$branch"
    done
    
    echo -e "\nDeletion complete!"
}

# Function to checkout branch
checkout_branch() {
    echo "Fetching local branches ordered by most recently used..."
    branches=$(get_branches false)
    
    if [ -z "$branches" ]; then
        echo "No branches available (excluding main and master)."
        return
    fi
    
    echo "Select a branch to checkout:"
    selected=$(echo "$branches" | fzf --height=30 --layout=reverse)
    
    if [ -z "$selected" ]; then
        echo "No branch selected."
        return
    fi
    
    echo -e "\nChecking out branch: $selected"
    git checkout "$selected"
}

# Function to merge branch
merge_branch() {
    echo "Fetching local branches ordered by most recently used..."
    current_branch=$(git symbolic-ref --short HEAD)
    branches=$(get_branches true)
    
    if [ -z "$branches" ]; then
        echo "No branches available to merge (excluding current branch, main and master)."
        return
    fi
    
    echo "Select a branch to merge into $current_branch:"
    selected=$(echo "$branches" | fzf --height=30 --layout=reverse)
    
    if [ -z "$selected" ]; then
        echo "No branch selected."
        return
    fi
    
    echo -e "\nYou are about to merge $selected into $current_branch"
    echo -e "Are you sure? (y/N)"
    read confirmation
    
    if [ "$confirmation" != "y" ] && [ "$confirmation" != "Y" ]; then
        echo "Operation cancelled."
        return
    fi
    
    echo -e "\nMerging $selected into $current_branch..."
    git merge "$selected"
}

# Function to rename branch
rename_branch() {
    echo "Fetching local branches ordered by most recently used..."
    branches=$(get_branches false)
    
    if [ -z "$branches" ]; then
        echo "No branches available to rename (excluding main and master)."
        return
    fi
    
    echo "Select a branch to rename:"
    selected=$(echo "$branches" | fzf --height=30 --layout=reverse)
    
    if [ -z "$selected" ]; then
        echo "No branch selected."
        return
    fi
    
    echo -e "\nEnter new name for branch '$selected':"
    read new_name
    
    if [ -z "$new_name" ]; then
        echo "No name provided. Operation cancelled."
        return
    fi
    
    echo -e "\nRenaming branch '$selected' to '$new_name'..."
    git branch -m "$selected" "$new_name"
    echo "Branch renamed successfully!"
}

# Function to show branch info
show_branch_info() {
    echo "Fetching local branches ordered by most recently used..."
    branches=$(get_branches false)
    
    if [ -z "$branches" ]; then
        echo "No branches available (excluding main and master)."
        return
    fi
    
    echo "Select a branch to view detailed information:"
    selected=$(echo "$branches" | fzf --height=30 --layout=reverse)
    
    if [ -z "$selected" ]; then
        echo "No branch selected."
        return
    fi
    
    echo -e "\nBranch information for: $selected"
    echo -e "\n▸ Last commit:"
    git log -1 --pretty=format:"%h %s (%ar) <%an>" "$selected"
    
    echo -e "\n\n▸ Comparison with main:"
    ahead=$(git rev-list --count main.."$selected")
    behind=$(git rev-list --count "$selected"..main)
    echo "$selected is $ahead commit(s) ahead and $behind commit(s) behind main"
    
    echo -e "\n▸ Files changed compared to main:"
    git diff --stat main.."$selected" | tail -n 1
    
    echo -e "\n▸ Creation date:"
    git reflog show "$selected" | tail -n 1 | awk '{print $1, $2, $3, $4, $5, $6}'
}

# Check for fzf dependency
if ! command -v fzf &> /dev/null; then
    echo "Error: This script requires fzf. Please install it first."
    echo "  Homebrew: brew install fzf"
    echo "  Others: https://github.com/junegunn/fzf#installation"
    exit 1
fi

# Main script logic
action=$1

if [ -z "$action" ]; then
    # No action provided, show menu
    echo "Select an action:"
    action=$(echo -e "delete\ncheckout\nmerge\nrename\ninfo" | fzf --height=10 --layout=reverse)
    
    if [ -z "$action" ]; then
        echo "No action selected. Exiting."
        exit 0
    fi
fi

case "$action" in
    "delete")
        delete_branches
        ;;
    "checkout")
        checkout_branch
        ;;
    "merge")
        merge_branch
        ;;
    "rename")
        rename_branch
        ;;
    "info")
        show_branch_info
        ;;
    "help")
        show_usage
        ;;
    *)
        echo "Unknown action: $action"
        show_usage
        exit 1
        ;;
esac